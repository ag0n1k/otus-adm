---
##note: To handle destination directory where prometheus is supposed to be installed
# create directory for the prometheus and then extract components there because of:
# - 'unarchived' task does not create destination directory
# - prometheus archive contains directory
- name: Check prometheus is installed
  become: true
  file:
    path: "{{ prometheus_path }}"
    mode: "{{ prometheus_path_mode }}"
    owner: "{{ prometheus_user_configuration.username }}"
    group: "{{ prometheus_user_configuration.group }}"
    state: directory
  register: __prometheus_installed

- name: Unarchive prometheus distribution
  when: __prometheus_installed.changed
  become: true
  unarchive:
    src: "{{ prometheus_archive_path }}"
    dest: "{{ prometheus_path }}"
    owner: "{{ prometheus_user_configuration.username }}"
    group: "{{ prometheus_user_configuration.group }}"
    remote_src: true
    extra_opts: [--strip-components=1]  ##note: extract from internal directory at level 1
  no_log: "{{ prometheus_no_log }}"

- name: "Ensure prometheus scripts are in '{{ prometheus_bin_dir }}'"
  become: true
  file:
    path: "{{ prometheus_bin_dir }}/{{ item }}"
    src: "{{ prometheus_path }}/{{ item }}"
    state: link
  loop:
    - prometheus
    - promtool

- name: "Ensure prometheus console templates are in '{{ prometheus_conf_dir }}'"
  become: true
  file:
    path: "{{ prometheus_conf_dir }}/{{ item }}"
    src: "{{ prometheus_path }}/{{ item }}"
    state: link
  loop:
    - console_libraries
    - consoles

- name: Get systemd version
  shell: systemctl --version | awk '$1 == "systemd" {print $2}'
  changed_when: false
  check_mode: false
  register: __prometheus_systemd_version

- name: Configure service
  become: true
  template:
    src: prometheus.service.j2
    dest: "{{ prometheus_service_dir }}/{{ prometheus_service_name }}.service"
    backup: true
  register: __prometheus_service_configuration
